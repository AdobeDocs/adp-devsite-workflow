---
name: Deployment
on:
  workflow_call:
    inputs:
      env:
        required: true
        type: string
      baseSha:
        type: string
        required: false
      deployAll:
        type: boolean
        default: false
      generateSummary:
        type: boolean
        default: true
jobs:
  set-state:
    runs-on: ubuntu-latest
    outputs:
      path_prefix: ${{ steps.get_path_prefix.outputs.path_prefix }}
      branch_short_ref: ${{ steps.get_branch.outputs.branch }}
      deploy_stage: ${{ contains(inputs.env, 'stage') }}
      deploy_prod: ${{ contains(inputs.env, 'prod') }}
      base_Sha: ${{ github.event.inputs.baseSha }}
      deploy_All: ${{ github.event.inputs.deployAll }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
  
      - name: Checkout Scripts Repo
        uses: actions/checkout@v4
        with:
          repository: AdobeDocs/adp-devsite-scripts
          path: scripts
          ref: ai

      - name: Get path prefix
        uses: actions/github-script@v7
        id: get_path_prefix
        with:
          script: |
            const script = require('./scripts/get-path-prefix.js');
            script({ core, isStage:"${{ contains(inputs.env, 'stage') }}", isProd:"${{ contains(inputs.env, 'prod') }}" });
          result-encoding: string

      - name: Get branch name
        shell: bash
        run: echo "branch=${GITHUB_REF#refs/heads/}" >> "$GITHUB_OUTPUT"
        id: get_branch

  echo-state:
    needs: [set-state]
    runs-on: ubuntu-latest
    steps:
      - run: echo "Deploy to stage - ${{ needs.set-state.outputs.deploy_stage }}"
      - run: echo "Deploy to prod - ${{ needs.set-state.outputs.deploy_prod }}"
      - run: echo "Path prefix - ${{ needs.set-state.outputs.path_prefix }}"
      - run: echo "Repository org - ${{ github.event.repository.owner.login }}"
      - run: echo "Repository name - ${{ github.event.repository.name }}"
      - run: echo "Repository branch - ${{ needs.set-state.outputs.branch_short_ref }}"
      - run: echo "Base Sha - ${{ needs.set-state.outputs.base_Sha }}"
      - run: echo "Deploy All - ${{ needs.set-state.outputs.deploy_All }}"

  deploy:
    defaults:
      run:
        shell: bash
    needs: [set-state]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Checkout Scripts Repo
        uses: actions/checkout@v4
        with:
          repository: AdobeDocs/adp-devsite-scripts
          path: scripts
          ref: ai
       
      - name: Get changed files in the src/pages folder
        if: needs.set-state.outputs.deploy_All == 'false'
        id: changed-files-specific
        uses: tj-actions/changed-files@v46.0.5
        with:
          json: true
          escape_json: false
          files: |
            src/pages/**
          base_sha: ${{ needs.set-state.outputs.base_Sha }}

      - name: Get all files from src/pages folder
        if: needs.set-state.outputs.deploy_All == 'true'
        id: all-files
        uses: actions/github-script@v7
        with:
          script: |
            const patterns = ['src/pages/**/*.*'];
            const globberSrcFiles = await glob.create(patterns[0]);
            const srcFiles = await globberSrcFiles.glob();

            const srcFilesFixedPaths = [];
            srcFiles.forEach((path) => {
              let pathSplitter = path.split(`${{ github.event.repository.name }}/src/pages`);
              if(pathSplitter.length > 1){
                  srcFilesFixedPaths.push(`src/pages${pathSplitter[1]}`)
              }
            });

            const serializedAllFiles = JSON.stringify(srcFilesFixedPaths);
            core.setOutput('all_files', serializedAllFiles);

      - name: Generate AI summary on all files on stage
        if: needs.set-state.outputs.generateSummary == 'true' && needs.set-state.outputs.deploy_All == 'true' && needs.set-state.outputs.deploy_stage == 'true'
        id: summary
        uses: actions/github-script@v7
        env:
          ADP_CHATGPT_API_KEY: ${{ secrets.ADP_CHATGPT_API_KEY }}
        with:
          script: |
            const script = require('./scripts/generate-summary.js');

            await script({
              core,
              changes: ${{ steps.all-files.outputs.all_files }},
              deletions: [],
              operation: "preview",
              siteEnv: "stage",
              branch: "${{ needs.set-state.outputs.branch_short_ref }}",
              pathPrefix: "${{ needs.set-state.outputs.path_prefix }}"
            });
     